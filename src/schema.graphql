type Query {
    user(id: String, email: String): User
}

type Mutation {
    createTempUser(data: CreateTempUserInput, secret: String!): String!
    register(data: CreateUserInput!): User!
    login(email: String!, password: String!, rememberMe: Boolean!): User!
    updateProfile(data: UpdateUserInput!, id: String): User!
    sendQRCode(to: String!): Boolean!
    changePassword(currentPassword: String!, newPassword: String): Boolean!
    logout: Boolean!
    forgotPassword(email: String!): Boolean!
    resetPassword(token: String!, password: String!): Boolean!
    deactivateAccount: Boolean!
}

type User {
    id: ID!
    email: String!
    name: String!
    mobile: String
    companyName: String
    interactionSessionId: String
    interactions: String
    loginWith: String
    disclaimer: Boolean!
    freeCoffee: Boolean!
    verified: Boolean!
    deactivated: Boolean!
}

input CreateTempUserInput {
    email: String!
    name: String!
    mobile: String
    interactionSessionId: String
    interactions: String
    loginWith: String
    disclaimer: Boolean
    freeCoffee: Boolean
}

input CreateUserInput {
    id: ID
    email: String!
    password: String!
    name: String!
    companyName: String
    mobile: String
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    companyName: String
    mobile: String
    verified: Boolean
    interactionSessionId: String
    interactions: String
    loginWith: String
    disclaimer: Boolean
    freeCoffee: Boolean
}